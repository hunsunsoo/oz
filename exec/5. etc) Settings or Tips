## 5. 배포 시 문제 생겼던 부분
## Jenkins 관련

- jenkins 플러그인 다운로드 에러
    - 네트워크 에러로 인해 플러그인들이 다운되지 않는 상황 발생
        - 다른 조는 다 잘 받아지는데 나만 안되는 상황이 발생하였음
    - jenkins는 다운로드 서버를 통해 플러그인을 끌어오는 형식
    - 다운로드 서버의 https → http로 변경 후 다운로드 다시 진행
    - 일부는 받아지나 일부는 여전히 받아지지 않는 상황 발생
    - 혹시나 하는 마음에 다시 다운로드를 눌렀더니 또 다시 일부는 받아지는 현상이 발생
    - 다 받을 때 까지 반복하여 필요한 플러그인 전부 다운로드
    - 근본적인 문제는 아직까지도 정확하게는 모르겠으나 당시엔 위의 방법으로 모든 플러그인을 성공적으로 다운로드 완
- java version 문제
    - 해당 프로젝트는 springboot 3.0.6 version을 사용하고 있기 때문에 java17을 사용하고 있음
    - jenkins:latest 이미지를 pull하였을 경우 기본 세팅이 java11로 되어있음
    - jenkins를 통한 springboot가 빌드되지 않음
    - jenkins 컨테이너 내부에 java 17을 설치한 후 환경 변수 설정까지 마쳤으나 java verions이 바뀌지 않는 현상 발생
    - jenkins 공식 문서를 참고한 뒤 jdk17 version의 이미지를 pull
    - 이 후 빌드가 성공적으로 진행 됨

## 방화벽 관련

- 방화벽 포트 문제
    - mysql, redis의 배포를 진행 한 후 외부에서 연결 시도 후 실패
    - db, username, password 관련된 모든 정보를 완벽하게 작성하였음에도 불구하고 연결 실패에 대한 의문
    - ec2에서 해당 포트 방화벽이 막혀있던 부분을 개방 진행
    - 성공적인 연결

## Docker 관련

- Docker-compose.yml 파일
    - 해당 프로젝트는 openvidu를 먼저 설치 후 jenkins 설치 진행
    - openvidu를 설치하는 시점에 이미 openvidu 세팅과 관련된 docker-compose.yml이 생성되어 버림
    - 프로젝트에 필요한 개인적인 세팅을 하기 위해서 이미 생성되어 있는 docker-compose.yml을 이용해야하는지 새로 하나를 만들어야 하는지에 대한 의문 발생
    - → openvidu와는 상관이 없는 docker-compose.yml을 따로 생성하여 해당 yml에 프로젝트 이미지들을 관리하고 세팅을 진행함
- Volume 마운트에 대한 이해
    - 도커 컨테이너 내부에서 외부에 있는 파일들이 필요한 경우가 생김
    - 외부에 있는 파일들을 하나씩 복사해서 끌어올 수 있는 상황이 아니었으며 굉장히 불편하였음
    - Docker-compose.yml에 volume 옵션을 사용하여 외부에 있는 파일을 도커 컨테이너 내부로 마운트 하여 진행
    - 외부에서 해당 파일을 수정하여도 도커 컨테이너 내부에서 참조하여 사용할 수 있음

## SSL 인증서 관련

- 인증서 발급 진행
    - 가장 많이들 사용한다는 certbot을 사용하고자 하였지만 제대로 진행이 되지 않는 상황 발생
    - 찾다보면 다른 무료 인증서 및 저렴한 ssl 인증서들이 생각보다 많이 있음
    - 해당 프로젝트는 다른 무료인증서를 사용하여 ssl 인증을 진행

## Redis 관련

- database 정보 초기화
    - Redis를 기본 포트, 인증없이 사용하던 도중 중간에 data들이 전부 날아가고 backup1,2,3,4만 남아있는 상황 발생
    - redis logo 및 검색을 한 결과 기본 포트에 인증이 없는 경우 크롤러 봇이 db를 날리고 backup1 2 3 4만 심어둔다는 글이 대다수 발견됨
    - redis를 사용할 땐 인증 암호를 세팅 진행
    - Redis 공식 홈페이지에서 해당 버전에 맞는 config 파일을 다운로드 받을 수 있음

## MySql 관련

- 외부 유저 접속 관련
    - mysql의 user 계정에 비밀번호를 생성하여 사용하고 있었으나 root 계정은 기본 비밀번호를 세팅하여 사용 중에 있었음
    - 순간적으로 외부 ip가 연속적으로 해당 mysql에 계속하여 접속을 시도하며 root계정의 권한으로 mysql 서비스를 종료시키는 Log 발생
    - root계정에 비밀번호 설정 이후 안정화됨

## Nginx 관련

- Nginx에 대한 이해 부족
    - 단순 nginx는 ssl 인증을 도와주는 소프트웨어로만 이해
    - ssl 인증 뿐 아니라 외부에서 들어오는 url을 체크하여 세팅 되어있는 곳으로 요청을 분기 시킴
    - 해당 프로젝트는 도커 컨테이너로 올라간 frontend와 backend를 nginx를 사용하여 /의 경우 front로 /api의 경우 backend로 요청을 분기 시킴
    - nginx를 사용하여 green/blue 형식의 무중단 배포도 진행이 가능한 것으로 학습